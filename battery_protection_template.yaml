# Battery Protection Template for Home Assistant
# This template monitors all BMS batteries and automatically disables discharging 
# for the battery with the lowest level, enabling it again when it's no longer the lowest.
#
# Add this to your configuration.yaml or include it as a package

# Template sensors to track battery levels and identify the lowest
template:
  - sensor:
      - name: "Battery Levels Summary"
        unique_id: battery_levels_summary
        state: >
          {% set batteries = states.sensor 
            | selectattr('entity_id', 'search', '_battery_level$')
            | selectattr('state', 'is_number')
            | list %}
          {{ batteries | length }} batteries monitored
        attributes:
          batteries: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% set battery_data = [] %}
            {% for battery in batteries %}
              {% set battery_info = {
                'entity_id': battery.entity_id,
                'name': battery.attributes.friendly_name or battery.name,
                'level': battery.state | float,
                'switch_entity': 'switch.' + battery.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging')
              } %}
              {% set battery_data = battery_data + [battery_info] %}
            {% endfor %}
            {{ battery_data | sort(attribute='level') }}
          lowest_battery: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% if batteries | length > 0 %}
              {% set lowest = batteries | min(attribute='state') %}
              {{ lowest.entity_id }}
            {% else %}
              none
            {% endif %}
          lowest_battery_level: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% if batteries | length > 0 %}
              {% set lowest = batteries | min(attribute='state') %}
              {{ lowest.state | float }}
            {% else %}
              0
            {% endif %}
        icon: mdi:battery-heart-variant

      - name: "Battery Protection Status"
        unique_id: battery_protection_status
        state: >
          {% set batteries = states.sensor 
            | selectattr('entity_id', 'search', '_battery_level$')
            | selectattr('state', 'is_number')
            | list %}
          {% if batteries | length == 0 %}
            no_batteries
          {% elif batteries | length == 1 %}
            single_battery
          {% else %}
            {% set lowest = batteries | min(attribute='state') %}
            {% set switch_entity = 'switch.' + lowest.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') %}
            {% if states(switch_entity) == 'off' %}
              protected
            {% else %}
              monitoring
            {% endif %}
          {% endif %}
        attributes:
          protected_batteries: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% set protected = [] %}
            {% if batteries | length > 1 %}
              {% set lowest = batteries | min(attribute='state') %}
              {% set switch_entity = 'switch.' + lowest.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') %}
              {% if states(switch_entity) == 'off' %}
                {% set protected = protected + [lowest.entity_id] %}
              {% endif %}
            {% endif %}
            {{ protected }}
          action_needed: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% if batteries | length <= 1 %}
              false
            {% else %}
              {% set lowest = batteries | min(attribute='state') %}
              {% set switch_entity = 'switch.' + lowest.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') %}
              {% set lowest_discharging = states(switch_entity) == 'on' %}
              
              {% set others_protected = [] %}
              {% for battery in batteries %}
                {% if battery.entity_id != lowest.entity_id %}
                  {% set other_switch = 'switch.' + battery.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') %}
                  {% if states(other_switch) == 'off' %}
                    {% set others_protected = others_protected + [battery.entity_id] %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              
              {{ lowest_discharging or (others_protected | length > 0) }}
            {% endif %}
        icon: mdi:shield-battery

# Automation to run every minute and manage battery discharging
automation:
  - id: battery_protection_manager
    alias: "Battery Protection Manager"
    description: "Automatically disable discharging for the lowest battery and enable for others"
    trigger:
      - platform: time_pattern
        minutes: "*"  # Every minute
    condition:
      - condition: template
        value_template: >
          {% set batteries = states.sensor 
            | selectattr('entity_id', 'search', '_battery_level$')
            | selectattr('state', 'is_number')
            | list %}
          {{ batteries | length > 1 }}
    action:
      - variables:
          batteries: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {{ batteries | list }}
          lowest_battery: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% if batteries | length > 0 %}
              {{ batteries | min(attribute='state') }}
            {% endif %}
          lowest_switch: >
            {% set batteries = states.sensor 
              | selectattr('entity_id', 'search', '_battery_level$')
              | selectattr('state', 'is_number')
              | list %}
            {% if batteries | length > 0 %}
              {% set lowest = batteries | min(attribute='state') %}
              switch.{{ lowest.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') }}
            {% endif %}
      
      # Log current status
      - service: system_log.write
        data:
          message: >
            Battery Protection: Found {{ batteries | length }} batteries. 
            Lowest: {{ lowest_battery.attributes.friendly_name or lowest_battery.name }} 
            at {{ lowest_battery.state }}%. 
            Protected: {{ (batteries | length) - (batteries | selectattr('entity_id', 'search', '_battery_level$') | map('regex_replace', '(.*)_battery_level$', 'switch.\\1_battery_discharging') | select('state', 'on') | list | length) }}/{{ batteries | length }}
          level: info
          logger: custom_components.battery_protection
      
      # Smart battery management: Turn batteries on/off based on current state and level
      - repeat:
          for_each: "{{ batteries }}"
          sequence:
            - variables:
                current_battery: "{{ repeat.item }}"
                current_switch: "switch.{{ repeat.item.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') }}"
                current_level: "{{ repeat.item.state | float }}"
                current_name: "{{ repeat.item.attributes.friendly_name or repeat.item.name }}"
                is_lowest: "{{ repeat.item.entity_id == lowest_battery.entity_id }}"
                switch_state: "{{ states(current_switch) }}"
                
                # Count how many batteries are currently OFF (protected)
                currently_off_count: >
                  {% set off_count = 0 %}
                  {% for bat in batteries %}
                    {% set bat_switch = 'switch.' + bat.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') %}
                    {% if states(bat_switch) == 'off' %}
                      {% set off_count = off_count + 1 %}
                    {% endif %}
                  {% endfor %}
                  {{ off_count }}
                
                # Calculate maximum allowed protected batteries based on total count
                max_protected_count: >
                  {% set total = batteries | length %}
                  {% if total <= 1 %}
                    0
                  {% elif total == 2 %}
                    1
                  {% elif total == 3 %}
                    1
                  {% else %}
                    {{ total - 3 }}
                  {% endif %}
            
            - choose:
                # Case 1: Battery is ON but is now the lowest - turn it OFF (if we can protect more)
                - conditions:
                    - condition: template
                      value_template: "{{ is_lowest and switch_state == 'on' }}"
                    - condition: template
                      value_template: "{{ current_switch != 'none' }}"
                    - condition: template
                      value_template: "{{ currently_off_count < max_protected_count }}"
                  sequence:
                    - service: switch.turn_off
                      target:
                        entity_id: "{{ current_switch }}"
                    - service: system_log.write
                      data:
                        message: >
                          🛡️ PROTECTED: {{ current_name }} ({{ current_level }}%) - turned OFF (lowest level)
                        level: warning
                        logger: custom_components.battery_protection
                
                # Case 2: Battery is OFF but no longer lowest - turn it ON (if we have too many protected)
                - conditions:
                    - condition: template
                      value_template: "{{ not is_lowest and switch_state == 'off' }}"
                    - condition: template
                      value_template: "{{ current_switch != 'none' }}"
                    - condition: template
                      value_template: "{{ currently_off_count > max_protected_count }}"
                  sequence:
                    - service: switch.turn_on
                      target:
                        entity_id: "{{ current_switch }}"
                    - service: system_log.write
                      data:
                        message: >
                          ✅ ENABLED: {{ current_name }} ({{ current_level }}%) - turned ON (no longer lowest)
                        level: info
                        logger: custom_components.battery_protection
                
                # Case 3: Battery is ON but we need to protect more to reach minimum discharging requirement
                - conditions:
                    - condition: template
                      value_template: "{{ not is_lowest and switch_state == 'on' and currently_off_count < max_protected_count }}"
                    - condition: template
                      value_template: "{{ current_switch != 'none' }}"
                    # Only turn OFF if this battery is among the lowest that need protection
                    - condition: template
                      value_template: >
                        {% set sorted_batteries = batteries | sort(attribute='state') %}
                        {% set battery_position = sorted_batteries | map(attribute='entity_id') | list | index(repeat.item.entity_id) %}
                        {{ battery_position < max_protected_count }}
                  sequence:
                    - service: switch.turn_off
                      target:
                        entity_id: "{{ current_switch }}"
                    - service: system_log.write
                      data:
                        message: >
                          🛡️ PROTECTED: {{ current_name }} ({{ current_level }}%) - turned OFF (among lowest needing protection)
                        level: warning
                        logger: custom_components.battery_protection

# Optional: Binary sensor to indicate if protection is active
binary_sensor:
  - platform: template
    sensors:
      battery_protection_active:
        friendly_name: "Battery Protection Active"
        device_class: safety
        value_template: >
          {% set batteries = states.sensor 
            | selectattr('entity_id', 'search', '_battery_level$')
            | selectattr('state', 'is_number')
            | list %}
          {% if batteries | length <= 1 %}
            false
          {% else %}
            {% set lowest = batteries | min(attribute='state') %}
            {% set switch_entity = 'switch.' + lowest.entity_id.split('.')[1].replace('_battery_level', '_battery_discharging') %}
            {{ states(switch_entity) == 'off' }}
          {% endif %}
        icon_template: >
          {% if is_state('binary_sensor.battery_protection_active', 'on') %}
            mdi:shield-check
          {% else %}
            mdi:shield-off
          {% endif %}

# Notification service (optional) - uncomment and adjust as needed
# notify:
#   - name: battery_protection_alerts
#     platform: [your_notification_platform]

# Optional automation for critical battery alerts
# automation:
#   - id: battery_critical_alert
#     alias: "Battery Critical Level Alert"
#     description: "Alert when any battery reaches critical level"
#     trigger:
#       - platform: numeric_state
#         entity_id: 
#           - sensor.battery_levels_summary
#         attribute: lowest_battery_level
#         below: 10  # Alert when lowest battery is below 10%
#     action:
#       - service: notify.battery_protection_alerts
#         data:
#           title: "Critical Battery Level"
#           message: >
#             Battery {{ state_attr('sensor.battery_levels_summary', 'lowest_battery') }} 
#             has reached {{ state_attr('sensor.battery_levels_summary', 'lowest_battery_level') }}%
